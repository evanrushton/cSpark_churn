n2 <- read.table("/Users/ERushton/Downloads/ponames.csv", header=TRUE,
sep=",", as.is = TRUE)
head(n2)
#Describe the location of matches in the 'name' field of both lists
paired <- match(n1$name,n2$name)
list(paired)
#Create a vector of names unique to n1
unique <- setdiff(n1$name,n2$name)
head(unique)
#Create a vector of names unique to n2
unique <- setdiff(n2$name,n1$name)
head(unique)
n1 <- read.table("/Users/ERushton/Downloads/prnames.csv", header=TRUE,
sep=",", as.is = TRUE)
n2 <- read.table("/Users/ERushton/Downloads/ponames.csv", header=TRUE,
sep=",", as.is = TRUE)
paired <- match(n1$name,n2$name)
list(paired)
unique <- setdiff(n1$name,n2$name)
list(unique)
?runif
?plot()
plot(x,y)
y
x<-runif(10,-1,1)
x<-runif(10,-1,1)
y<-runif(10,-1,1)
plot(x,y)
x<-runif(10,-1,1)
y<-runif(10,-1,1)
plot(x,y)
x<-runif(10,-1,1)
y<-runif(10,-1,1)
plot(x,y)
# Sample Data X
N=10
x<-runif(N,-1,1)
y<-runif(N,-1,1)
# Target Function f
# Plot
plot(x,y)
# Sample Data X
N=10
x<-runif(N,-1,1)
y<-runif(N,-1,1)
l<-(runif(1,-1,1), runif(1,-1,1))
# Plot
plot(x,y)
plot(l, type="i")
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
# Plot
plot(x,y)
lines(runif(1,-1,1), runif(1,-1,1), type="l")
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
x1<-runif(1,-1,1); y1<-runif(1,-1,1)
# Plot
plot(x,y)
lines(x1,y1,type="l")
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline[1],yline[1],xline[2], yline[2],type="l")
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline[1],yline[1],xline[2], yline[2],type="l")
print(xline[1])
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline[1],yline[1],xline[2], yline[2],type="l")
print(xline[1], xline[2])
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline[1],yline[1],xline[2], yline[2],type="l")
print(xline[0], xline[1])
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline,yline,type="l")
print(xline, yline)
help print
h print
help(print)
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline,yline,type="l")
print(x)
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline,yline,type="l")
print(xline); print(yline)
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline,yline,type="l")
print(xline); print(yline)
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline,yline,type="l")
print(xline); print(yline)
help(curve)
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
curve(y-yline[1] = ((yline[2]-yline[1])/(xline[2]-xline[1]))(x - xline[1]),
from = -1,to = 1, add=TRUE)
help(curve)
# Sample Data X
N=10; x1<-runif(N,-1,1); y1<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x1,y1)
curve(y-yline[1] = ((yline[2]-yline[1])/(xline[2]-xline[1]))(x - xline[1]),
from = -1, to = 1, add=TRUE)
mywd
setwd
getwd
getwd()
cd ./practice-R-code/kaggle
cd practice-R-code
setwd(./practice-R-code/kaggle)
setwd(practice-R-code)
setwd(/Users/ERushton/practice-R-code/kaggle)
setwd(Users/ERushton/practice-R-code/kaggle)
getwd()
setwd("Users/ERushton/practice-R-code/kaggle")
install.packages(swirl)
install.packages("swirl")
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
bowplot(ppm, col='blue')
boxplot(ppm, col='blue')
?abline
abline(h = 12)
hist(ppm, col='green')
rug(ppm)
hist(low)
low
high
hist(ppm, col='green', breaks=100)
rug(ppm)
hist(ppm, col='green')
abline(v=12,lwd=2)
abline(v=median(ppm),col='magenta',lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col='wheat', main='Number of Counties in Each Region')
boxplot(pm25 ~ region, data=pollution, col='red')
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region=='east')
head(east)
hist(east$pm25, col='green')
hist(subset(pollution, region=='west'), col='green')
hist(subset(pollution, region=='west')$pm25, col='green')
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5, 4, 2, 1))
west <- subset(pollution, region=='west')
plot(west$latitude, west$pm25, main='West')
plot(east$latitude, east$pm25, main='East')
pwd()
wd()
ls()
pwd
# bimodal distribution sample size N with median versus ave as choice of center
lowVal = 45
lowSpread = 3
highVal = 75
highSpread = 4
N = 15
# Generated 8 random values near low - 45
# choose N+1 / 2 random values around lowValue
num_mode_low = (N + 1 ) / 2
a <- round( lowVal + lowSpread * rnorm(num_mode_low) ) # {45, 45, 46, 46, 47, 48}
# Generate 7 random values near high + (high-low)
num_mode_high = N - num_mode_low
b <- round( lowVal + highSpread * rnorm(num_mode_high) ) # {75, 25, 76, 76, 77, 78}
dist_1 = c(a, b)
fivenum(dist_1)
dist_1
rm(ls)
ls
ls()
lowVal = 45
lowSpread = 3
highVal = 75
highSpread = 4
N = 15
# Generated 8 random values near low - 45
# choose N+1 / 2 random values around lowValue
num_mode_low = (N + 1 ) / 2
a <- round( lowVal + lowSpread * rnorm(num_mode_low) ) # {45, 45, 46, 46, 47, 48}
# Generate 7 random values near high + (high-low)
num_mode_high = N - num_mode_low
b <- round( highVal + highSpread * rnorm(num_mode_high) ) # {75, 25, 76, 76, 77, 78}
dist_1 = c(a, b)
fivenum(dist_1)
summary(dist_1)
dist_1
a
b
lowVal = 45
lowSpread = 3
highVal = 75
highSpread = 4
N = 15
# Generated 8 random values near low - 45
# choose N+1 / 2 random values around lowValue
num_mode_low = (N + 1 ) / 2
a <- round( lowVal + lowSpread * rnorm(num_mode_low) ) # {45, 45, 46, 46, 47, 48}
# Generate 7 random values near high + (high-low)
num_mode_high = N - num_mode_low
b <- round( highVal + (highVal - lowVal) + highSpread * rnorm(num_mode_high) ) # {75, 25, 76, 76, 77, 78}
dist_1 = c(a, b)
fivenum(dist_1)
summary(dist_1)
dist_1
dist_1 <- sort(dist_1)
dist_1
ls()
install.packages(c("nycflights13", "gapminder", "Lahman"))
12
1+2
tidyverse_update
tidyverse_update()
ls()
library(help="datasets")
X<-data("AirPassengers")
ls
pwd
pwdir
cwd
vars
ls()
head(x)
head(X)
head(AirPassengers)
head(X[1])
pwd()
```{r}
library(tidyverse)
library(corrplot)
library(randomForest)
library(glmnet)
# ATTENTION: The data "./Data/ChurnSeg_Past_6_months_.csv" won't work because it is aggregated aross subscription duration. Need to constrain the data during aggregation step in JQL as J.F. did in his pull. "./Data/Churn_5-week_windows_Past_3_months.csv" is not up-to-date with a few factors we want to include and a recent date range
setwd("~/R-projects/codeSpark_churn")
df10 <- read_csv("./Data/trackingWindow_Churn_Prediction-10days.csv")
df10sub <- read_csv("./Data/trackingWindow_Churn_Prediction-10daysub.csv")
df33 <- read_csv("./Data/trackingWindow_Churn_Prediction-33days.csv")
df33sub <- read_csv("./Data/trackingWindow_Churn_Prediction-33daysub.csv")
df65 <- read_csv("./Data/trackingWindow_Churn_Prediction-65days.csv")
df65sub <- read_csv("./Data/trackingWindow_Churn_Prediction-65daysub.csv")
xtabs(~ canceled + round(qa_days_subscribed), data=df10)
xtabs(~ canceled + round(qa_days_subscribed), data=df10sub)
xtabs(~ canceled + round(qa_days_subscribed), data=df33)
xtabs(~ canceled + round(qa_days_subscribed), data=df33sub)
xtabs(~ canceled + round(qa_days_subscribed), data=df65)
xtabs(~ canceled + round(qa_days_subscribed), data=df65sub)
xtabs(~ as.Date(qa_subscription_date) + time_spent, data=df10)
table(as.Date(df10$qa_subscription_date)
)
table(as.Date(df10sub$qa_subscription_date))
table(as.Date(df33$qa_subscription_date))
table(as.Date(df33sub$qa_subscription_date))
table(as.Date(df65$qa_subscription_date))
table(as.Date(df65sub$qa_subscription_date))
table(as.Date(df65sub$qa_canceled_date))
df <- df10
xtabs(~ canceled + did_store, data=df)
xtabs(~ canceled + did_store, data=df)
df <- df10sub
xtabs(~ canceled + did_store, data=df)
xtabs(~ canceled + did_minigame, data=df)
xtabs(~ canceled + did_pets, data=df)
xtabs(~ canceled + did_news, data=df)
xtabs(~ canceled + did_game_maker_play, data=df)
xtabs(~ canceled + did_game_maker_edit, data=df)
xtabs(~ canceled + did_puzzle, data=df)
sapply(df, function(y) length(which(is.na(y))))
table(as.Date(df$qa_last_event_date))
xtabs(~ canceled + did_publish, data=df)
xtabs(~ canceled + did_parent_portal, data=df)
xtabs(~ canceled + did_snoopy, data=df)
xtabs(~ canceled + did_temple, data=df)
xtabs(~ canceled + did_story_session, data=df)
df <- df10
sapply(df, function(y) length(which(is.na(y))))
xtabs(~ canceled + round(qa_days_subscribed), data=df)
table(as.Date(df$qa_subscription_date))
table(as.Date(df$qa_last_event_date))
xtabs(~ canceled + did_store, data=df)
xtabs(~ canceled + did_minigame, data=df)
xtabs(~ canceled + did_pets, data=df)
xtabs(~ canceled + did_news, data=df)
xtabs(~ canceled + did_game_maker_play, data=df)
xtabs(~ canceled + did_game_maker_edit, data=df)
xtabs(~ canceled + did_puzzle, data=df)
xtabs(~ canceled + did_publish, data=df)
xtabs(~ canceled + did_parent_portal, data=df)
xtabs(~ canceled + did_snoopy, data=df)
xtabs(~ canceled + did_temple, data=df)
xtabs(~ canceled + did_story_session, data=df)
df <- df33
sapply(df, function(y) length(which(is.na(y))))
xtabs(~ canceled + round(qa_days_subscribed), data=df)
table(as.Date(df$qa_subscription_date))
table(as.Date(df$qa_last_event_date))
xtabs(~ canceled + did_store, data=df)
xtabs(~ canceled + did_minigame, data=df)
xtabs(~ canceled + did_pets, data=df)
xtabs(~ canceled + did_news, data=df)
xtabs(~ canceled + did_game_maker_play, data=df)
xtabs(~ canceled + did_game_maker_edit, data=df)
xtabs(~ canceled + did_puzzle, data=df)
xtabs(~ canceled + did_publish, data=df)
xtabs(~ canceled + did_parent_portal, data=df)
xtabs(~ canceled + did_snoopy, data=df)
xtabs(~ canceled + did_temple, data=df)
xtabs(~ canceled + did_story_session, data=df)
df <- df33sub
sapply(df, function(y) length(which(is.na(y))))
xtabs(~ canceled + round(qa_days_subscribed), data=df)
table(as.Date(df$qa_subscription_date))
table(as.Date(df$qa_last_event_date))
xtabs(~ canceled + did_store, data=df)
xtabs(~ canceled + did_minigame, data=df)
xtabs(~ canceled + did_pets, data=df)
xtabs(~ canceled + did_news, data=df)
xtabs(~ canceled + did_game_maker_play, data=df)
xtabs(~ canceled + did_game_maker_edit, data=df)
xtabs(~ canceled + did_puzzle, data=df)
xtabs(~ canceled + did_publish, data=df)
df <- df10
xtabs(~ canceled + did_snoopy, data=df)
df <- df10sub
xtabs(~ canceled + did_snoopy, data=df)
df <- df65
sapply(df, function(y) length(which(is.na(y))))
xtabs(~ canceled + round(qa_days_subscribed), data=df)
table(as.Date(df$qa_subscription_date))
table(as.Date(df$qa_last_event_date))
xtabs(~ canceled + did_store, data=df)
xtabs(~ canceled + did_minigame, data=df)
xtabs(~ canceled + did_pets, data=df)
xtabs(~ canceled + did_news, data=df)
xtabs(~ canceled + did_game_maker_play, data=df)
xtabs(~ canceled + did_game_maker_edit, data=df)
xtabs(~ canceled + did_puzzle, data=df)
xtabs(~ canceled + did_publish, data=df)
xtabs(~ canceled + did_parent_portal, data=df)
xtabs(~ canceled + did_snoopy, data=df)
xtabs(~ canceled + did_temple, data=df)
xtabs(~ canceled + did_story_session, data=df)
df <- df65sub
sapply(df, function(y) length(which(is.na(y))))
xtabs(~ canceled + round(qa_days_subscribed), data=df)
table(as.Date(df$qa_subscription_date))
table(as.Date(df$qa_last_event_date))
xtabs(~ canceled + did_store, data=df)
xtabs(~ canceled + did_minigame, data=df)
xtabs(~ canceled + did_pets, data=df)
xtabs(~ canceled + did_news, data=df)
xtabs(~ canceled + did_game_maker_play, data=df)
xtabs(~ canceled + did_game_maker_edit, data=df)
xtabs(~ canceled + did_puzzle, data=df)
xtabs(~ canceled + did_publish, data=df)
xtabs(~ canceled + did_parent_portal, data=df)
xtabs(~ canceled + did_snoopy, data=df)
xtabs(~ canceled + did_temple, data=df)
xtabs(~ canceled + did_story_session, data=df)
hist(as.Date(df$qa_subscription_date))
hist(as.Date(df$qa_subscription_date), breaks="weeks")
df <- df10sub
hist(as.Date(df$qa_subscription_date), breaks="weeks")
hist(as.Date(df10$qa_subscription_date), breaks="weeks")
hist(as.Date(df10$qa_subscription_date), breaks="weeks", freq=TRUE)
hist(as.Date(df10sub$qa_subscription_date), breaks="weeks", freq=TRUE)
hist(as.Date(df33$qa_subscription_date), breaks="weeks", freq=TRUE)
hist(as.Date(df33sub$qa_subscription_date), breaks="weeks", freq=TRUE)
hist(as.Date(df65$qa_subscription_date), breaks="weeks", freq=TRUE)
hist(as.Date(df65sub$qa_subscription_date), breaks="weeks", freq=TRUE)
# ===== Visualize Vars =====
df <- df10sub
#Histograms to check distributions of numerical vars
par(mfrow = c(3, 2))
hist(df$time_spent / 60, main=paste("Minutes Played (N= ",length(df$time_spent),")", sep=""), xlab="")
library(tidyverse)
library(corrplot)
library(randomForest)
library(glmnet)
setwd("~/R-projects/codeSpark_churn")
df10 <- read_csv("./Data/trackingWindow_Churn_Prediction-10days.csv")
df10sub <- read_csv("./Data/trackingWindow_Churn_Prediction-10daysub.csv")
df33 <- read_csv("./Data/trackingWindow_Churn_Prediction-33days.csv")
df33sub <- read_csv("./Data/trackingWindow_Churn_Prediction-33daysub.csv")
df65 <- read_csv("./Data/trackingWindow_Churn_Prediction-65days.csv")
df65sub <- read_csv("./Data/trackingWindow_Churn_Prediction-65daysub.csv")
# ===== Visualize Vars =====
df <- df10sub
#Histograms to check distributions of numerical vars
par(mfrow = c(3, 2))
hist(df$time_spent / 60, main=paste("Minutes Played (N= ",length(df$time_spent),")", sep=""), xlab="")
hist(df$time_spent[which(df$time_spent < 14400)] / 60, main=paste("Under 240 mins (N= ",length(df$time_spent[which(df$time_spent < 14400)]),")", sep=""), xlab="")
hist(df$time_spent[which(df$time_spent < 7200)] / 60, main=paste("Under 120 mins (N= ",length(df$time_spent[which(df$time_spent < 7200)]),")", sep=""), xlab="")
hist(df$time_spent[which(df$time_spent < 3600)] / 60, main=paste("Under 60 mins (N= ",length(df$time_spent[which(df$time_spent < 3600)]),")", sep=""), xlab="")
hist(df$time_spent[which(df$time_spent < 2400)] / 60, main=paste("Under 40 mins (N= ",length(df$time_spent[which(df$time_spent < 2400)]),")", sep=""), xlab="")
hist(df$time_spent[which(df$time_spent < 1200)] / 60, main=paste("Under 20 mins (N= ",length(df$time_spent[which(df$time_spent < 1200)]),")", sep=""), xlab="")
xtabs(~ canceled + round(qa_days_subscribed), data=df33sub)
xtabs(~ canceled + round(qa_days_subscribed), data=df10sub)
one_month_window <- df33sub %>%
filter(qa_days_subscribed > 10)
ten_day_window <- df10sub %>%
filter(qa_days_subscribed < 30)
one_month_window <- df33sub %>%
filter(qa_days_subscribed > 10) %>%
select(canceled, time_spent)
hist(df$create_profile_events)
table(df$create_profile_events)
table(df$daily_activities_rewarded)
table(df$daily_coin_bonus)
table(df$three_starred_levels)
xtabs(~ canceled + converted_from_trial, data=df)
xtabs(~ canceled + converted_from_trial, data=df33sub)
xtabs(~ did_story_session + qa_subscription_Date, data=df)
xtabs(~ did_story_session + qa_subscription_date, data=df)
xtabs(~ qa_subscription_date + did_story_session, data=df)
xtabs(~ as.Date(qa_subscription_date) + did_story_session, data=df)
xtabs(~ as.Date(qa_subscription_date) + did_story_session, data=df33)
one_month_window <- df33sub %>%
filter(qa_days_subscribed > 10) %>%
select(canceled, time_spent, mission_complete_events, game_maker_drafts, daily_coin_bonus, store_sessions, pet_days, studio_publishes, mission_reload_events, three_starred_levels, minigame_events, clicked_news_events, game_maker_play_events, game_maker_edit_events, parent_portal_tab_events, sandbox_events, app_open_events, snoopy, temple, story_session, did_store, did_minigame, did_pets, did_news, did_game_maker_play, did_game_maker_edit, did_puzzle, did_publish, did_parent_portal, did_snoopy, did_temple, did_story_session)
ten_day_window <- df10sub %>%
filter(qa_days_subscribed < 30) %>%
select(canceled, time_spent, mission_complete_events, game_maker_drafts, daily_coin_bonus, store_sessions, pet_days, studio_publishes, mission_reload_events, three_starred_levels, minigame_events, clicked_news_events, game_maker_play_events, game_maker_edit_events, parent_portal_tab_events, sandbox_events, app_open_events, snoopy, temple, story_session, did_store, did_minigame, did_pets, did_news, did_game_maker_play, did_game_maker_edit, did_puzzle, did_publish, did_parent_portal, did_snoopy, did_temple, did_story_session)
logistic10 <- glm(canceled ~ ., data=ten_day_window, family = "binomial")
logistic33 <- glm(canceled ~ ., data=one_month_window, family = "binomial")
summary(logistic10)
summary(logistic33)
df <- one_month_window
sapply(df, function(y) length(which(is.na(y))))
xtabs(~ canceled + round(qa_days_subscribed), data=df10sub)
xtabs(~ canceled + round(qa_days_subscribed), data=df)
table(as.Date(df$qa_subscription_date))
table(as.Date(df$qa_last_event_date))
xtabs(~ canceled + converted_from_trial, data=df)
xtabs(~ canceled + did_store, data=df)
xtabs(~ canceled + did_minigame, data=df)
xtabs(~ canceled + did_pets, data=df)
xtabs(~ canceled + did_news, data=df)
xtabs(~ canceled + did_game_maker_play, data=df)
ll.null10 <- logistic10$null.deviance/-2
ll.proposed10 <- logistic10$deviance/-2
ll.null <- logistic10$null.deviance/-2
ll.proposed <- logistic10$deviance/-2
(ll.null - ll.proposed) / ll.null
1-pchisq(2*(ll.proposed - ll.null), df=(length(logistic10$coefficients)-1))
logistic <- glm(canceled ~ ., data=ten_day_window, family = "binomial")
# Plot
df <- ten_day_window
predicted.data <- data.frame(
probability.of.canceled=logistic$fitted.values,
canceled=df$canceled)
predicted.data <- predicted.data[
order(predicted.data$probability.of.canceled, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
library(ggplot2)
library(cowplot)
ggplot(data=predicted.data, aes(x=rank, y=probability.of.canceled)) +
geom_point(aes(color=hd), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting canceled")
ggplot(data=predicted.data, aes(x=rank, y=probability.of.canceled)) +
geom_point(aes(color=canceled), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting canceled")
