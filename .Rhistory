curve(y-yline[1] = ((yline[2]-yline[1])/(xline[2]-xline[1]))(x - xline[1]),
from = -1,to = 1, add=TRUE)
help(curve)
# Sample Data X
N=10; x1<-runif(N,-1,1); y1<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x1,y1)
curve(y-yline[1] = ((yline[2]-yline[1])/(xline[2]-xline[1]))(x - xline[1]),
from = -1, to = 1, add=TRUE)
mywd
setwd
getwd
getwd()
cd ./practice-R-code/kaggle
cd practice-R-code
setwd(./practice-R-code/kaggle)
setwd(practice-R-code)
setwd(/Users/ERushton/practice-R-code/kaggle)
setwd(Users/ERushton/practice-R-code/kaggle)
getwd()
setwd("Users/ERushton/practice-R-code/kaggle")
install.packages(swirl)
install.packages("swirl")
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
bowplot(ppm, col='blue')
boxplot(ppm, col='blue')
?abline
abline(h = 12)
hist(ppm, col='green')
rug(ppm)
hist(low)
low
high
hist(ppm, col='green', breaks=100)
rug(ppm)
hist(ppm, col='green')
abline(v=12,lwd=2)
abline(v=median(ppm),col='magenta',lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col='wheat', main='Number of Counties in Each Region')
boxplot(pm25 ~ region, data=pollution, col='red')
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region=='east')
head(east)
hist(east$pm25, col='green')
hist(subset(pollution, region=='west'), col='green')
hist(subset(pollution, region=='west')$pm25, col='green')
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5, 4, 2, 1))
west <- subset(pollution, region=='west')
plot(west$latitude, west$pm25, main='West')
plot(east$latitude, east$pm25, main='East')
pwd()
wd()
ls()
pwd
# bimodal distribution sample size N with median versus ave as choice of center
lowVal = 45
lowSpread = 3
highVal = 75
highSpread = 4
N = 15
# Generated 8 random values near low - 45
# choose N+1 / 2 random values around lowValue
num_mode_low = (N + 1 ) / 2
a <- round( lowVal + lowSpread * rnorm(num_mode_low) ) # {45, 45, 46, 46, 47, 48}
# Generate 7 random values near high + (high-low)
num_mode_high = N - num_mode_low
b <- round( lowVal + highSpread * rnorm(num_mode_high) ) # {75, 25, 76, 76, 77, 78}
dist_1 = c(a, b)
fivenum(dist_1)
dist_1
rm(ls)
ls
ls()
lowVal = 45
lowSpread = 3
highVal = 75
highSpread = 4
N = 15
# Generated 8 random values near low - 45
# choose N+1 / 2 random values around lowValue
num_mode_low = (N + 1 ) / 2
a <- round( lowVal + lowSpread * rnorm(num_mode_low) ) # {45, 45, 46, 46, 47, 48}
# Generate 7 random values near high + (high-low)
num_mode_high = N - num_mode_low
b <- round( highVal + highSpread * rnorm(num_mode_high) ) # {75, 25, 76, 76, 77, 78}
dist_1 = c(a, b)
fivenum(dist_1)
summary(dist_1)
dist_1
a
b
lowVal = 45
lowSpread = 3
highVal = 75
highSpread = 4
N = 15
# Generated 8 random values near low - 45
# choose N+1 / 2 random values around lowValue
num_mode_low = (N + 1 ) / 2
a <- round( lowVal + lowSpread * rnorm(num_mode_low) ) # {45, 45, 46, 46, 47, 48}
# Generate 7 random values near high + (high-low)
num_mode_high = N - num_mode_low
b <- round( highVal + (highVal - lowVal) + highSpread * rnorm(num_mode_high) ) # {75, 25, 76, 76, 77, 78}
dist_1 = c(a, b)
fivenum(dist_1)
summary(dist_1)
dist_1
dist_1 <- sort(dist_1)
dist_1
ls()
install.packages(c("nycflights13", "gapminder", "Lahman"))
12
1+2
tidyverse_update
tidyverse_update()
ls()
library(help="datasets")
X<-data("AirPassengers")
ls
pwd
pwdir
cwd
vars
ls()
head(x)
head(X)
head(AirPassengers)
head(X[1])
pwd()
setwd("~/R-projects/Prima Beta R")
setwd("~/R-projects/codeSpark_churn")
library(ggplot2)
library(corrplot)
library(randomForest)
install.packages("randomForest")
# Importing the csv file
df <- read.table("./Data/Segmentation_Report.csv", fill = TRUE, header = TRUE, sep = ",", na.strings = c("NA","")) # 64813    23
# Check NAs
sapply(df, function(y) sum(length(which(is.na(y))))) # there are none
ggplot(df[which(is.na(df$value.sub_End)),],aes(x= value.account_Status)) + geom_bar(aes(fill=Churn.))
df[which(is.na(df$value.sub_End) & df$value.account_Status=="Expired Subscriber"),]
dim(df[which(is.na(df$value.sub_End) & df$value.account_Status=="Expired Subscriber"),])
# Check NAs
sapply(df, function(y) sum(length(which(is.na(y))))) # these are for blanks that have been converted to NA
#Histograms and tables to check distributions of vars
hist(df$value.minutes_played, freq=T)
#log-transform minutes_played
df$value.log_minutes_played <- log(df$value.minutes_played)
#Histograms and tables to check distributions of vars
hist(df$value.log_minutes_played, freq=T)
#converting value.sub_Start and value.sub_End to actual date (exclude time?)
df$value.sub_End <- as.Date(df$value.sub_End, "%Y-%m-%d");
df$value.sub_Start <- as.Date(df$value.sub_Start, format="%Y-%m-%d")
#converting value.sub_Start and value.sub_End to actual date (exclude time?)
df$value.sub_End <- as.Date(df$value.sub_End, "%Y-%m-%d");
str(df)
hist(df$value.app_open)
hist(log(df$value.app_open))
df$value.sub_End - df$value.sub_Start
# Time difference of subscription
df$value.sub_Duration <- df$value.sub_End - df$value.sub_Start
# Check NAs
sapply(df, function(y) sum(length(which(is.na(y))))) # these are for blanks that have been converted to NA
Sys.Date
View(Sys.Date)
Sys.Date()
# Time difference of subscription
df$value.sub_End[which(is.na(df$value.sub_End))] <- Sys.Date()
df$value.sub_Duration <- df$value.sub_End - df$value.sub_Start
# Check NAs
sapply(df, function(y) sum(length(which(is.na(y))))) # these are for blanks that have been converted to NA
hist(df$value.sub_Duration, freq=T)
str(df)
df$value.sub_Duration <- as.integer(df$value.sub_End - df$value.sub_Start) / (365/12) # convert days to months
str(df)
hist(df$value.sub_Duration, freq=T)
df$value.log_sub_duration <- log(df$value.sub_Duration)
hist(df$value.log_sub_duration, freq=T)
hist(df$value.clicked_news, freq=T)
hist(log(df$value.clicked_news))
hist(log(df$value.pets))
hist(df$value.pets, freq=T)
hist(log(df$value.pets))
hist(df$value.publish_game, freq=T)
hist(log(df$value.publish_game))
hist(df$value.draft_game, freq=T)
hist(log(df$value.draft_game))
hist(df$value.draft_game, freq=T)
hist(df$value.completed_puzzle, freq=T)
hist(log(df$value.completed_puzzle))
summary(df)
df[which(df$value.minutes_played > 10000),]
# Ratio of minutes played : length of subscription
df$ratio.min_played_to_duration <- df$value.minutes_played / df$value.sub_Duration
summary(df)
hist(df$value.sub_Duration, freq=T)
df[which(df$value.sub_Duration) > 1000,]
df[which(df$value.sub_Duration > 1000),]
df[!which(df$value.sub_Duration > 1000),]
df[which(!df$value.sub_Duration > 1000),]
dim(df)
dim(df[which(df$value.sub_Duration > 1000),])
df.n
str(df)
hist(df$value.sub_Duration[which(df$value.sub_Duration < 1000)], freq=T)
# Remove Outliers
df <- df[which(df$value.sub_Duration < 1000)]
# Remove Outliers
df <- df[which(df$value.sub_Duration < 1000), ]
#Histograms and tables to check distributions of vars
hist(df$value.minutes_played, freq=T)
dim(df[which(df$value.minutes_played >100000),])
df <- df[which(df$value.minutes_played < 100000), ]
#Histograms and tables to check distributions of vars
hist(df$value.minutes_played, freq=T)
df <- df[which(df$value.minutes_played < 50000), ]
#Histograms and tables to check distributions of vars
hist(df$value.minutes_played, freq=T)
df <- df[which(df$value.minutes_played < 20000), ]
hist(df$value.sub_Duration[which(df$value.sub_Duration < 1000)], freq=T)
#Histograms and tables to check distributions of vars
hist(df$value.minutes_played, freq=T)
df <- df[which(df$value.minutes_played < 10000), ]
#Histograms and tables to check distributions of vars
hist(df$value.minutes_played, freq=T)
library(ggplot2)
library(corrplot)
install.packages(corrplot)
install.packages("corrplot")
library(corrplot)
library(randomForest)
# Importing the csv file
df <- read.table("./Data/Segmentation_Report.csv", fill = TRUE, header = TRUE, sep = ",", na.strings = c("NA","")) # 64813    23
# Check NAs
sapply(df, function(y) sum(length(which(is.na(y))))) # these are for blanks that have been converted to NA
#converting value.sub_Start and value.sub_End to actual date (exclude time?)
df$value.sub_End <- as.Date(df$value.sub_End, "%Y-%m-%d");
df$value.sub_Start <- as.Date(df$value.sub_Start, format="%Y-%m-%d")
# Time difference of subscription
df$value.sub_End[which(is.na(df$value.sub_End))] <- Sys.Date() # Make blank end dates the current date
df$value.sub_Duration <- as.integer(df$value.sub_End - df$value.sub_Start) / (365/12) # convert days to months
summary(df)
dim(df)
# Remove Outliers
df <- df[which(df$value.sub_Duration < 1000), ]
dim(df)
df <- df[which(df$value.minutes_played < 10000), ]
dim(df)
#Histograms and tables to check distributions of vars
hist(df$value.minutes_played, freq=T)
hist(df$value.sub_Duration, freq=T)
df[df$value.sub_Duration<0]
df[which(df$value.sub_Duration<0),]
dim(df[which(df$value.sub_Duration<0),])
df <- df[which(df$value.sub_Duration < 0), ] # Negative subscription times ()
dim(df)
# Scripts for EDA of codeSpark user data and initial churn model
library(ggplot2)
library(corrplot)
library(randomForest)
# Importing the csv file
df <- read.table("./Data/Segmentation_Report.csv", fill = TRUE, header = TRUE, sep = ",", na.strings = c("NA","")) # 64813    23
# Check NAs
sapply(df, function(y) sum(length(which(is.na(y))))) # these are for blanks that have been converted to NA
#converting value.sub_Start and value.sub_End to actual date (exclude time?)
df$value.sub_End <- as.Date(df$value.sub_End, "%Y-%m-%d");
df$value.sub_Start <- as.Date(df$value.sub_Start, format="%Y-%m-%d")
# Time difference of subscription
df$value.sub_End[which(is.na(df$value.sub_End))] <- Sys.Date() # Make blank end dates the current date
df$value.sub_Duration <- as.integer(df$value.sub_End - df$value.sub_Start) / (365/12) # convert days to months
summary(df)
# Remove Outliers
df <- df[which(df$value.sub_Duration < 1000), ] # Subscriptions over 83 months (63218 24)
df <- df[which(df$value.minutes_played < 10000), ] # Playtime over 167 hours (62882 24)
df <- df[which(df$value.sub_Duration > 0), ] # Negative subscription times ()
dim(df)
#Histograms and tables to check distributions of vars
hist(df$value.minutes_played, freq=T)
hist(df$value.sub_Duration, freq=T)
#Histograms and tables to check distributions of vars
hist(df$value.minutes_played, freq=T)
hist(df$value.sub_Duration)
hist(df$value.completed_puzzle)
hist(log(df$value.completed_puzzle))
hist(df$value.reload_puzzle)
hist(df$value.edit_game)
hist(df$value.store)
# Remove Outliers (Initially 64813 24)
dim(df[which(df$value.completed_puzzle > 1000)], )
# Remove Outliers (Initially 64813 24)
dim(df[which(df$value.completed_puzzle > 1000), ] )
# Remove Outliers (Initially 64813 24)
dim(df[which(df$value.completed_puzzle > 500), ] )
df[which(df$value.completed_puzzle > 1000), ]
# Remove Outliers (Initially 64813 24)
dim(df[which(df$value.minigame > 500), ] )
# Remove Outliers (Initially 64813 24)
dim(df[which(df$value.minigame > 1000), ] )
# Remove Outliers (Initially 64813 24)
dim(df[which(df$value.minigame > 10000), ] )
# Remove Outliers (Initially 64813 24)
dim(df[which(df$value.play_game > 1000), ] )
# Remove Outliers (Initially 64813 24)
dim(df[which(df$value.play_game > 10000), ] )
df[which(df$value.play_game > 10000), ]
hist(df$value.play_game)
hist(log(df$value.completed_puzzle))
hist(df$value.publish_game)
hist(df$value.draft_game)
hist(df$value.temple)
hist(df$value.snoopy)
hist(df$value.complete_tutorial)
hist(df$value.completed_puzzle)
hist(log(df$value.completed_puzzle))
ggplot(df[which(df$value.completed_puzzle > 4), ],aes(x= value.account_Status)) + geom_bar(aes(fill=Churn.))
ggplot(df[which(df$value.completed_puzzle > 100), ],aes(x= value.account_Status)) + geom_bar(aes(fill=Churn.))
ggplot(df[which(df$value.completed_puzzle < 100), ],aes(x= value.account_Status)) + geom_bar(aes(fill=Churn.))
ggplot(df[which(df$value.completed_puzzle < 10), ],aes(x= value.account_Status)) + geom_bar(aes(fill=Churn.))
ggplot(df[which(df$value.completed_puzzle < 5), ],aes(x= value.account_Status)) + geom_bar(aes(fill=Churn.))
ggplot(df[which(df$value.completed_puzzle < 1), ],aes(x= value.account_Status)) + geom_bar(aes(fill=Churn.))
# Check NAs
sapply(df, function(y) sum(length(which(is.na(y))))) # these are for blanks that have been converted to NA
ggplot(df[which(df$value.completed_puzzle < 10), ],aes(x= value.account_Status)) + geom_bar(aes(fill=Churn.))
ggplot(df,aes(x= value.account_Status)) + geom_bar(aes(fill=Churn.))
#Pairwise scatterplot for log(minutes)
ggplot(df, aes(x= Churn., y = value.account_Status))+
geom_jitter(alpha=0.5, aes(color=Churn.),position = position_jitter(width = 0.1))+coord_flip()
# Expired subscribers who didn't churn?
dim(df[which(df$Churn. == 0 & df$value.account_Status == "Expired Subscriber"), ] )
# Expired subscribers who didn't churn?
dim(df[-which(df$Churn. == 0 & df$value.account_Status == "Expired Subscriber"), ] ) # 1287
df <- df[-which(df$Churn. == 0 & df$value.account_Status == "Expired Subscriber"), ] #
dim(df)
#Pairwise scatterplot for log(minutes)
ggplot(df, aes(x= Churn., y = value.account_Status))+
geom_jitter(alpha=0.5, aes(color=Churn.),position = position_jitter(width = 0.1))+coord_flip()
ggplot(df,aes(x= value.account_Status)) + geom_bar(aes(fill=Churn.))
ggplot(df,aes(x= value.age )) + geom_bar(aes(fill=Churn.))
ggplot(df,aes(x= value.gender )) + geom_bar(aes(fill=Churn.))
ggplot(df,aes(x= value.gender )) + geom_bar(aes(fill=df$Churn.))
ggplot(df,aes(x= value.gender )) + geom_bar(aes(fill=Churn.))
ggplot(df,aes(x= value.gender )) + geom_bar(aes(fill=as.factor(Churn.)))
# plot churn versus some of the more straight-forward vars
df$Churn. <- as.factor(df$Churn.)
#Pairwise scatterplots
ggplot(df, aes(x= Churn., y = value.account_Status))+
geom_jitter(alpha=0.5, aes(color=Churn.), position = position_jitter(width = 0.1))+coord_flip()
ggplot(df,aes(x= value.gender )) + geom_bar(aes(fill=Churn.))
ggplot(df,aes(x= value.age )) + geom_bar(aes(fill=Churn.))
#Pairwise scatterplots
ggplot(df, aes(x= Churn., y = value.sub_Duration))+
geom_jitter(alpha=0.5, aes(color=Churn.), position = position_jitter(width = 0.1))+coord_flip()
# Ratio of minutes played : length of subscription
df$ratio.min_played_to_duration <- df$value.minutes_played / df$value.sub_Duration
str(df)
# Remove key, account_status, sub_start/end
df <- df[, -c(1,3,4,5)]
str(df)
# ===== Model Testing =====
#define test and train dataset
smp_size <- floor(0.75 * nrow(df))
set.seed(28)
train_ind <- sample(seq_len(nrow(df)), size = smp_size) # random indeces
train <-df[train_ind, ]
test <- df[-train_ind, ]
df <- df[, c(2:5, 1, 6:nrow(df))]
df <- df[, c(2:5,1,6:nrow(df))]
df <- df[, c(2,3,4,5,1,6:nrow(df))]
nrow(df)
df <- df[, c(2:5,1,6:ncol(df))]
str(df)
# ===== Model Testing =====
#define test and train dataset
smp_size <- floor(0.75 * nrow(df))
set.seed(28)
train_ind <- sample(seq_len(nrow(df)), size = smp_size) # random indeces
train <-df[train_ind, ]
test <- df[-train_ind, ]
train.n<-sapply(train,class)=='numeric'
str(train.n)
sapply(train,class)
train.n<-sapply(train,class)=='numeric'||'integer'
sapply(train,class)
(sapply(train,class)=='numeric' | sapply(train,class)=='integer')
sapply(train,class)=='numeric' | sapply(train,class)=='integer'
train.n<-sapply(train,class)=='numeric' | sapply(train,class)=='integer'
trainNum<-train[,train.n]
head(trainNum)
#correlation plot for numeric variables
corr<-cor(trainNum[,-8])
corrplot(corr, type = "lower", tl.pos = "ld")
#correlation plot for numeric variables
corr<-cor(trainNum)
corrplot(corr, type = "lower", tl.pos = "ld")
cor(trainNum)
cor(trainNum)
str(train)
str(test)
set.seed(28)
#model construction
randomForestModel <- randomForest(Churn. ~.,
data=train,
importance=TRUE,
ntree=2000)
# Check NAs
sapply(df, function(y) sum(length(which(is.na(y))))) # these are for blanks that have been converted to NA
ggplot(df,aes(x= value.age )) + geom_bar(aes(fill=Churn.))
NAage <- df[which(is.na(df$value.age)), ]
dim(NAage)
sapply(NAage, function(y) sum(length(which(is.na(y)))))
library(ggplot2)
library(corrplot)
library(randomForest)
# Import the csv file
df <- read.table("./Data/Segmentation_Report.csv", fill = TRUE, header = TRUE, sep = ",") # 64813 23
# Check NAs
sapply(df, function(y) sum(length(which(is.na(y))))) # these are for blanks that have been converted to NA
# Converting value.sub_Start and value.sub_End to Date (exclude time?)
df$value.sub_End <- as.Date(df$value.sub_End, "%Y-%m-%d");
df$value.sub_Start <- as.Date(df$value.sub_Start, format="%Y-%m-%d")
table(df$value.sub_End)
ggplot(df,aes(x= value.sub_End )) + geom_bar(aes(fill=Churn.))
# Duration of subscription
df$value.sub_End[which(df$value.sub_End =='')] <- Sys.Date() # Make blank end dates the current date
ggplot(df,aes(x= value.sub_End )) + geom_bar(aes(fill=Churn.))
library(ggplot2)
library(corrplot)
lib
# Import the csv file
df <- read.table("./Data/Segmentation_Report.csv", fill = TRUE, header = TRUE, sep = ",", na.strings = c("NA","")) # 64813 23
# Check NAs
sapply(df, function(y) sum(length(which(is.na(y))))) # these are for blanks that have been converted to NA
# Converting value.sub_Start and value.sub_End to Date (exclude time?)
df$value.sub_End <- as.Date(df$value.sub_End, "%Y-%m-%d");
df$value.sub_Start <- as.Date(df$value.sub_Start, format="%Y-%m-%d")
# Duration of subscription
df$value.sub_End[which(is.na(df$value.sub_End))] <- Sys.Date() # Make blank end dates the current date
df$value.sub_Duration <- as.integer(df$value.sub_End - df$value.sub_Start) / (365/12) # convert days to months
summary(df)
library(ggplot2)
library(corrplot)
library(randomForest)
# Import the csv file
df <- read.table("./Data/Segmentation_Report.csv", fill = TRUE, header = TRUE, sep = ",", na.strings = c("NA","")) # 64813 23
# Check NAs
sapply(df, function(y) sum(length(which(is.na(y))))) # these are for blanks that have been converted to NA
df$value.account_Status[which(is.na(df$value.sub_End))]
table(df$value.sub_End[which(df$value.account_Status=="Active Subscriber")]
)
df$value.sub_End[which(df$value.account_Status=="Active Subscriber")]
max(df$value.sub_End)
str(df)
# Converting value.sub_Start and value.sub_End to Date (exclude time?)
df$value.sub_End <- as.Date(df$value.sub_End, "%Y-%m-%d");
df$value.sub_Start <- as.Date(df$value.sub_Start, format="%Y-%m-%d")
max(df$value.sub_End)
max(df$value.sub_Start)
max(df$value.sub_End[which(!is.na(df$value.sub_End))])
max(df$value.sub_End[which(!is.na(df$value.sub_End) & df$value.sub_End < "2118-07-27")])
max(df$value.sub_End[which(!is.na(df$value.sub_End) & df$value.sub_End < "2118-07-21")])
max(df$value.sub_End[which(!is.na(df$value.sub_End) & df$value.sub_End < "2118-07-06")])
df[which(format(df$value.sub_End, "%Y")==2118,]
df[which(format(df$value.sub_End, "%Y")==2118),]
df[which(is.na(df$value.age)), ]
max(df$value.sub_End[which(!is.na(df$value.sub_End) & format(df$value.sub_End, "%Y" < 2118)])
max(df$value.sub_End[which(!is.na(df$value.sub_End) & format(df$value.sub_End, "%Y" < 2118))])
max(df$value.sub_End[which(!is.na(df$value.sub_End) & format(df$value.sub_End, "%Y") < 2118)])
df[which(format(df$value.sub_End, "%Y")>2100),]
table(format(df$value.sub_End[which(format(df$value.sub_End, "%Y")>2100),], "%Y"))
table(format(df$value.sub_End[which(format(df$value.sub_End, "%Y")>2100)], "%Y"))
table(df$value.account_Status)
dim(df[which(df$value.account_Status != c("Active Gifted", "Expired Gifted")),])
dim(df[which(!df$value.account_Status %in% c("Active Gifted", "Expired Gifted")),])
dim(df)
df <- df[which(!df$value.account_Status %in% c("Active Gifted", "Expired Gifted")),]
table(format(df$value.sub_End[which(format(df$value.sub_End, "%Y")>2100)], "%Y")) # Remove "Gifted" accounts should solve this
df[which(format(df$value.sub_End, "%Y")==2118),] # Active Gifted are incorrectly labeled churn=1
df$value.account_Status[which(is.na(df$value.sub_End))]
df[which(is.na(df$value.age)), ]
max(df$value.sub_End)
max(df$value.sub_End[which(!is.na(df$value.sub_End))])
# Duration of subscription
df$value.sub_End[which(df$value.account_Status=="Active Subscriber")] <- "2018-08-06" # Make blank end dates the current date
# Check NAs
sapply(df, function(y) sum(length(which(is.na(y))))) # these are for blanks that have been converted to NA
df[which(is.na(df$value.age)), ]
df$value.age[which(is.na(df$value.age))] <- ''
levels(df$value.age)
df$value.age[which(is.na(df$value.age))] <- '?'
df$value.account_Status[which(is.na(df$value.sub_End))]
levels(df$value.gender)
levels(df$value.gender) <- c("female", "male", "?")
df$value.gender[which(is.na(df$value.gender))] <- '?' # Make NA values unknown gender
# Check NAs
sapply(df, function(y) sum(length(which(is.na(y))))) # these are for blanks that have been converted to NA
levels(df$value.country)
